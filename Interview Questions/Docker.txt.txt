
1. Q: What is Docker?
A: Platform for developing, shipping, and running applications in containers.
Key feature: Ensures consistent environments across development and production.
Benefit: Simplifies deployment and scales applications easily.
Use case: Microservices architecture, CI/CD pipelines.

2. Q: What is a container?
A: Lightweight, standalone, executable package including all dependencies.
Difference from VM: Shares host OS kernel, more efficient resource use.
Benefits: Fast startup, consistent environment, improved portability.
Use case: Isolating applications and their dependencies.

3. Q: How is a container different from a virtual machine?
A: Containers virtualize OS, VMs virtualize hardware.
Key difference: Containers are more lightweight and start up faster.
Resource usage: Containers share host OS kernel, use fewer resources.
Use case: Containers for microservices, VMs for full OS isolation.

4. Q: What is a Docker image?
A: Read-only template used to create containers.
Contents: Application code, runtime, libraries, environment variables, config files.
Usage: Base for creating and running containers.
Benefit: Ensures consistency across different environments.

5. Q: What is a Dockerfile?
A: Text file containing instructions for building a Docker image.
Key components: FROM, RUN, COPY, CMD instructions.
Usage: Automates the image creation process.
Best practice: Keep it simple, minimize layers for efficiency.


6. Q: What is the purpose of the FROM instruction in a Dockerfile?
A: Specifies the base image for subsequent instructions.
Usage: First non-comment instruction in Dockerfile.
Example: FROM ubuntu:20.04
Best practice: Use official, minimal base images when possible.

7. Q: What is Docker Compose?
A: Tool for defining and running multi-container Docker applications.
Key feature: Uses YAML file to configure application's services.
Benefit: Simplifies management of multi-container applications.
Use case: Development environments, automated testing setups.

8. Q: What is the typical structure of a docker-compose.yml file?
A: Includes version, services, networks, and volumes sections.
Services: Define container configurations.
Networks: Specify custom networks for containers.
Volumes: Define persistent data storage.

9. Q: How do you start containers with Docker Compose?
A: Use command "docker-compose up" in directory with docker-compose.yml.
Options: -d for detached mode, --build to rebuild images.
Benefit: Starts all services defined in the compose file.
Best practice: Use version control for docker-compose.yml files.

10. Q: What is the purpose of the "depends_on" option in Docker Compose?
A: Expresses dependency between services, determines startup order.
Usage: Ensures dependent services start before the current service.
Limitation: Only waits for container to start, not for service to be ready.
Best practice: Use with health checks for robust dependency management.

11. Q: How can you scale a service using Docker Compose?
A: Use command "docker-compose up --scale SERVICE=NUM".
Example: docker-compose up --scale web=3
Benefit: Easily create multiple instances of a service.
Consideration: Ensure your application is designed for horizontal scaling.

12. Q: What is a Docker volume?
A: Persistent data storage mechanism outside container's filesystem.
Types: Named volumes, host volumes, anonymous volumes.
Benefit: Data persists beyond the life of a container.
Use case: Databases, stateful applications.

13. Q: How do you create a volume in a docker-compose.yml file?
A: Use "volumes" key under service definition or at top level.
Service-level: volumes: - myvolume:/path/in/container
Top-level: volumes: myvolume:
Best practice: Use named volumes for better manageability.

14. Q: What is the difference between ADD and COPY instructions in a Dockerfile?
A: COPY simply copies local files, ADD has additional features.
ADD features: Can unpack compressed files, fetch remote URLs.
Best practice: Use COPY unless you specifically need ADD's features.
Security consideration: ADD can introduce vulnerabilities if misused.

15. Q: What is Docker Hub?
A: Cloud-based registry service for storing and sharing Docker images.
Features: Public/private repositories, automated builds, webhooks.
Usage: Push and pull images, integrate with CI/CD pipelines.
Alternative: Can set up private registries for sensitive images.

16. Q: How do you push an image to Docker Hub?
A: Use "docker push" command after tagging image with Docker Hub username.
Steps: 1) docker login, 2) docker tag local-image:tag username/repo:tag, 3) docker push username/repo:tag
Best practice: Use specific tags rather than 'latest'.
Security: Be cautious about pushing images with sensitive data.

17. Q: What is the purpose of the EXPOSE instruction in a Dockerfile?
A: Informs Docker that container listens on specified network ports at runtime.
Usage: EXPOSE <port> [<port>/<protocol>...]
Note: Doesn't actually publish the port, used for documentation.
Related: Use -p flag with docker run to actually publish ports.

18. Q: How can you view the logs of a running container?
A: Use "docker logs CONTAINER_ID" command.
Options: --follow to stream logs, --tail N to show last N lines.
Usage: Useful for debugging and monitoring containers.
Best practice: Implement centralized logging for production environments.

19. Q: What is Docker Swarm?
A: Native clustering and orchestration solution for Docker.
Features: Service scaling, load balancing, rolling updates.
Alternative: Kubernetes is a more feature-rich orchestration platform.
Use case: Simpler deployments where Kubernetes might be overkill.

20. Q: How do you list all running containers?
A: Use "docker ps" command.
Options: -a to show all containers (including stopped ones).
Output: Container ID, Image, Command, Created, Status, Ports, Names.
Tip: Use docker ps -q to get only container IDs.

21. Q: What is the difference between CMD and ENTRYPOINT in a Dockerfile?
A: CMD provides default arguments for ENTRYPOINT or default command.
ENTRYPOINT: Specifies the executable to run when container starts.
Interaction: CMD arguments can be overridden at runtime, ENTRYPOINT typically not.
Best practice: Use ENTRYPOINT for the main executable, CMD for default arguments.

22. Q: How can you limit the resources a container can use?
A: Use resource constraints like --memory and --cpus in docker run command.
In Compose: Use 'deploy' section with 'resources' subsection.
Example: --memory=512m --cpus=0.5
Best practice: Always set resource limits in production environments.

23. Q: What is a multi-stage build in Docker?
A: Method to create smaller production images using multiple FROM statements.
Benefit: Reduces final image size by leaving build tools behind.
Example: Use one stage to compile, another to create runtime image.
Best practice: Use for compiled languages or when build tools aren't needed in final image.

24. Q: How do you create a Docker network?
A: Use "docker network create" command.
Example: docker network create mynetwork
Types: bridge, host, overlay, macvlan.
Use case: Isolate containers or enable container communication.

25. Q: What is the purpose of .dockerignore file?
A: Specifies files/directories to exclude when building Docker image.
Benefit: Reduces build context size, potentially speeding up builds.
Syntax: Similar to .gitignore file.
Best practice: Exclude version control directories, temp files, logs.

26. Q: How can you check the version of Docker installed?
A: Use "docker version" command.
Output: Client and Server versions, Go version, OS/Arch.
Alternative: "docker --version" for a simpler output.
Tip: Ensure client and server versions match to avoid compatibility issues.

27. Q: What is Docker Compose override file?
A: File named docker-compose.override.yml for customizing configurations.
Usage: Automatically read along with docker-compose.yml if present.
Benefit: Allows environment-specific overrides without modifying main file.
Example use: Different settings for development vs. production.

28. Q: How do you remove all stopped containers?
A: Use "docker container prune" command.
Alternative: docker rm $(docker ps -aq -f status=exited)
Caution: Ensure you don't need data from stopped containers before removing.
Best practice: Regularly clean up to free disk space.

29. Q: What is the difference between "docker-compose up" and "docker-compose run"?
A: "up" starts all services, "run" runs a one-time command against a service.
"up" usage: Start entire application defined in docker-compose.yml.
"run" usage: Execute a command in a new container of a service.
Example "run": docker-compose run web python manage.py migrate

30. Q: How can you update a single service when using Docker Compose?
A: Use "docker-compose up --no-deps SERVICE" command.
--no-deps: Doesn't start linked services.
Usage: Quickly update one service without affecting others.
Alternative: Use docker-compose up -d --build SERVICE to rebuild and update.

31. Q: What is the purpose of HEALTHCHECK instruction in Dockerfile?
A: Tells Docker how to test if container is working correctly.
Usage: HEALTHCHECK CMD command
Benefit: Docker can restart unhealthy containers automatically.
Example: HEALTHCHECK CMD curl -f http://localhost/ || exit 1

32. Q: How do you specify environment variables in Docker Compose?
A: Use "environment" key under a service in docker-compose.yml.
Syntax: environment: - KEY=value
Alternative: Use env_file to specify a file with environment variables.
Best practice: Use .env file for sensitive values, don't commit to version control.

33. Q: What is the difference between "docker-compose down" and "docker-compose stop"?
A: "down" stops and removes containers, networks, volumes; "stop" only stops containers.
"down" usage: Clean up entire Docker Compose environment.
"stop" usage: Temporarily stop services without removing anything.
Best practice: Use "down" for complete cleanup, "stop" for temporary halts.

34. Q: How can you view the Docker image layers?
A: Use "docker history IMAGE_NAME" command.
Output: Shows each layer, its size, and the command that created it.
Benefit: Helps understand how image is constructed, identify large layers.
Alternative: Use docker inspect IMAGE_NAME for more detailed information.

35. Q: What is Docker BuildKit?
A: New backend for executing Docker builds with improved performance.
Features: Better performance, storage management, and security.
Benefit: Faster builds, especially for complex multi-stage builds.
Activation: Set DOCKER_BUILDKIT=1 environment variable.

36. Q: How do you enable BuildKit in Docker?
A: Set environment variable DOCKER_BUILDKIT=1 before running docker build.
Alternative: Add {"features": {"buildkit": true}} to Docker daemon config.
Benefit: Enables advanced features like multi-stage builds, build secrets.
Compatibility: Supported in Docker 18.09 and later.

37. Q: What is the purpose of the "restart" policy in Docker Compose?
A: Defines when and how to restart containers when they exit.
Options: "no", "always", "on-failure", "unless-stopped".
Usage: restart: always under service definition.
Best practice: Use "unless-stopped" for most production services.

38. Q: How can you run a container in detached mode?
A: Use the -d flag with the docker run command.
Example: docker run -d nginx
Benefit: Container runs in background, doesn't block terminal.
Tip: Use docker logs CONTAINER_ID to view output later.

39. Q: What is the purpose of docker-compose.override.yml file?
A: Overrides configuration from main docker-compose.yml file.
Usage: Automatically read if present, no need to specify.
Benefit: Allows environment-specific configurations without modifying main file.
Example: Different settings for development vs. production environments.

40. Q: How do you force Docker Compose to recreate containers?
A: Use --force-recreate flag with docker-compose up.
Usage: docker-compose up --force-recreate
Benefit: Ensures fresh containers even if configuration hasn't changed.
Caution: May cause temporary downtime during recreation.

41. Q: What is the difference between shell form and exec form in Dockerfile CMD instruction?
A: Shell form runs command in a shell, exec form runs command directly.
Shell form: CMD command param1 param2
Exec form: CMD ["executable","param1","param2"]
Best practice: Use exec form to avoid issues with signal handling.

42. Q: How can you view real-time events from Docker?
A: Use the "docker events" command.
Options: --filter to show specific event types.
Usage: Monitoring Docker daemon activity in real-time.
Example: docker events --filter 'type=container'

43. Q: What is the purpose of .dockerignore file?
A: Tells Docker which files to ignore when building an image.
Benefit: Reduces build context size, potentially speeding up builds.
Syntax: Similar to .gitignore file.
Best practice: Exclude version control files, logs, temporary files.

44. Q: How do you copy files from a container to the host?
A: Use the "docker cp" command.
Syntax: docker cp CONTAINER:SRC_PATH DEST_PATH
Example: docker cp mycontainer:/app/log.txt ./log.txt
Tip: Can also copy from host to container by reversing paths.

45. Q: What is Docker content trust?
A: Feature providing digital signing for Docker images.
Benefit: Ensures integrity and publisher authenticity of images.
Activation: Set DOCKER_CONTENT_TRUST=1 environment variable.
Use case: Critical for secure production environments.

46. Q: How can you check the logs of a specific service in Docker Compose?
A: Use "docker-compose logs SERVICE_NAME".
Options: --follow to stream logs, --tail=N to show last N lines.
Example: docker-compose logs --follow web
Best practice: Implement centralized logging for production environments.

47. Q: What is the purpose of the "build" key in docker-compose.yml?
A: Specifies build configuration for creating image from source.
Usage: Defines context and Dockerfile for building custom images.
Example: build: ./dir
Alternative: Can be a detailed configuration with context and dockerfile keys.

48. Q: How do you remove all unused Docker objects?
A: Use the "docker system prune" command.
Removes: Stopped containers, unused networks, dangling images, build cache.
Caution: Can free up significant disk space but may remove wanted resources.
Best practice: Regularly run in development environments to free space.

49. Q: What is the difference between ADD and COPY instructions in Dockerfile?
A: ADD has extra functionality like auto-extracting archives, COPY is simpler.
Best practice: Use COPY unless you specifically need ADD's features.
COPY usage: Preferred for adding local files to image.
ADD usage: Can retrieve remote URLs, auto-extract compressed files.

50. Q: How can you reduce the size of a Docker image?
A: Use multi-stage builds, minimize layers, use smaller base images.
Technique: Remove unnecessary files, combine RUN commands.
Base images: Consider Alpine-based images for smaller footprint.
Tool: Use docker image inspect to analyze image composition.