
1. Q: What is Spring Boot?
A: Framework simplifying development of stand-alone Spring-based applications.
Key features: Auto-configuration, embedded server, easy dependency management.
Benefit: Reduces boilerplate code and configuration.
Use case: Rapidly develop and deploy microservices and web applications.

2. Q: What are the main advantages of using Spring Boot?
A: Auto-configuration, embedded server, easy dependency management, production-ready features.
Example: Tomcat server embedded by default, no need for separate deployment.
Benefit: Faster development and deployment cycles.
Best practice: Utilize Spring Boot starters for common use cases.

3. Q: How does Spring Boot simplify microservices development?
A: Provides easy setup, embedded servers, health checks, external configuration support.
Example: Use spring-boot-starter-web for RESTful services out of the box.
Benefit: Faster microservices development and deployment.
Integration: Works well with Spring Cloud for distributed systems.

4. Q: What is the purpose of the @SpringBootApplication annotation?
A: Combines @Configuration, @EnableAutoConfiguration, and @ComponentScan.
Benefit: Simplifies initial setup of Spring Boot applications.
Usage: Place on main application class.
Tip: Can be customized to exclude specific auto-configuration classes.

5. Q: How do you create a RESTful API with Spring Boot?
A: Use @RestController annotation and define methods with @GetMapping, @PostMapping, etc.
Example: @GetMapping("/users") for GET endpoint to retrieve users.
Benefit: Simplifies creation of RESTful web services.
Best practice: Use appropriate HTTP methods for different operations.


6. Q: What is Spring Data JPA?
A: Part of Spring Data project, simplifies JPA-based repositories.
Key feature: Reduces boilerplate code for data access layer.
Usage: Extend JpaRepository or CrudRepository interfaces.
Benefit: Provides common CRUD operations and query methods out of the box.

7. Q: How do you define a repository in Spring Data JPA?
A: Create interface extending JpaRepository or CrudRepository.
Example: public interface UserRepository extends JpaRepository<User, Long> {}
Benefit: Automatically implements basic CRUD operations.
Advanced: Can define custom query methods or use @Query annotation.

8. Q: What is the advantage of using Spring Data JPA over plain JPA?
A: Reduces boilerplate code, provides query methods out of the box.
Example: findByUsername(String username) automatically implemented.
Benefit: Increases productivity and reduces error-prone repetitive code.
Feature: Supports QueryDSL and specifications for type-safe queries.

9. Q: How do you implement pagination with Spring Data JPA?
A: Use Pageable parameter in repository methods, return Page<T> or Slice<T>.
Example: Page<User> findAll(Pageable pageable);
Usage: Controller receives Pageable as parameter (auto-configured by Spring).
Benefit: Easy implementation of paginated APIs.

10. Q: What is Spring Security?
A: Powerful, customizable authentication and access-control framework.
Key features: Comprehensive security services for Java EE-based applications.
Use cases: Implement login, remember-me, CSRF protection.
Integration: Works seamlessly with Spring Boot applications.

11. Q: How do you enable Spring Security in a Spring Boot application?
A: Add spring-boot-starter-security dependency to project.
Effect: Applies default security configuration automatically.
Customization: Create WebSecurityConfigurerAdapter bean to override defaults.
Best practice: Always customize default security settings for production use.

12. Q: What is JWT and how is it used in authentication?
A: JSON Web Token, compact way of securely transmitting information between parties.
Use in auth: Represent claims securely, often used for stateless authentication.
Structure: Header, payload, signature.
Benefit: Allows stateless authentication, useful for microservices and SPAs.

13. Q: How do you implement JWT authentication in Spring Boot?
A: Use JWT filter to validate tokens, integrate with Spring Security.
Steps: Create JwtTokenProvider, JwtTokenFilter, configure SecurityConfig.
Benefit: Enables stateless, scalable authentication.
Best practice: Store tokens securely, implement token refresh mechanism.

14. Q: What is the purpose of the @Autowired annotation?
A: Used for automatic dependency injection.
Usage: Can be used on constructors, setter methods, or fields.
Benefit: Reduces need for explicit wiring in XML or Java config.
Best practice: Prefer constructor injection for mandatory dependencies.

15. Q: How do you handle exceptions globally in a Spring Boot application?
A: Use @ControllerAdvice and @ExceptionHandler annotations.
Example: Create class with @ControllerAdvice, define @ExceptionHandler methods.
Benefit: Centralizes exception handling across the application.
Best practice: Create custom exceptions for different error scenarios.

16. Q: What is the difference between @Component, @Service, and @Repository annotations?
A: All used for component scanning, but have semantic differences.
@Component: Generic stereotype for Spring-managed components.
@Service: Indicates class is holding business logic.
@Repository: Indicates class is used for data access, adds extra benefits like exception translation.

17. Q: How do you configure database properties in Spring Boot?
A: Use application.properties or application.yml file.
Example: spring.datasource.url=jdbc:mysql://localhost/db
Benefit: Externalized configuration, easy to change between environments.
Advanced: Can use profiles for environment-specific configurations.

18. Q: What is Spring Boot Actuator?
A: Provides production-ready features to help monitor and manage application.
Features: Health checks, metrics, info, dump, etc.
Usage: Add spring-boot-starter-actuator dependency.
Security: Ensure to secure actuator endpoints in production.

19. Q: How do you implement method-level security in Spring Boot?
A: Use @PreAuthorize or @Secured annotations on methods.
Example: @PreAuthorize("hasRole('ADMIN')") on method.
Requirement: Enable with @EnableGlobalMethodSecurity in config class.
Benefit: Fine-grained access control at method level.

20. Q: What is the purpose of the @Transactional annotation?
A: Defines scope of a single database transaction.
Usage: Can be applied at class or method level.
Features: Configurable isolation level, propagation behavior, rollback rules.
Best practice: Use for methods that modify data to ensure data integrity.

21. Q: How do you implement caching in Spring Boot?
A: Use @Cacheable, @CachePut, and @CacheEvict annotations.
Example: @Cacheable("users") on method to cache its results.
Requirement: Enable caching with @EnableCaching in config class.
Benefit: Improves application performance by reducing database calls.

22. Q: What is the difference between @RequestParam and @PathVariable?
A: @RequestParam for query parameters, @PathVariable for URL path variables.
Example: @GetMapping("/users/{id}") with @PathVariable("id") for path variable.
Example: @GetMapping("/users") with @RequestParam("name") for query parameter.
Usage: Choose based on RESTful URL design and parameter importance.

23. Q: How do you handle CORS in Spring Boot?
A: Use @CrossOrigin annotation or configure CorsRegistry.
Global config: Override addCorsMappings in WebMvcConfigurer.
Benefit: Allows controlled access from different origins (domains).
Security: Be cautious with CORS configuration to prevent security vulnerabilities.

24. Q: What is Spring Boot DevTools?
A: Set of tools that make the development experience more pleasant.
Features: Automatic restart, live reload, global settings, remote debug tunneling.
Usage: Add spring-boot-devtools dependency to project.
Benefit: Increases developer productivity during development phase.

25. Q: How do you implement validation in Spring Boot?
A: Use Bean Validation with annotations like @NotNull, @Size, etc.
Example: @NotBlank(message = "Name is mandatory") on field.
Usage: Add @Valid annotation to controller method parameters.
Benefit: Centralized, reusable validation logic.

26. Q: What is the purpose of the @ConfigurationProperties annotation?
A: Used to bind external configurations to a Java bean.
Usage: Define a class with fields matching property names.
Benefit: Type-safe configuration properties.
Best practice: Use for groups of related properties.

27. Q: How do you implement asynchronous processing in Spring Boot?
A: Use @Async annotation on methods, enable with @EnableAsync.
Example: @Async public CompletableFuture<User> findUser(String username) {...}
Benefit: Improves application performance for long-running tasks.
Caution: Be aware of transaction boundaries in async methods.

28. Q: What is the difference between @Controller and @RestController?
A: @RestController combines @Controller and @ResponseBody.
@Controller: Used for traditional Spring MVC controllers.
@RestController: Simplifies creation of RESTful web services.
Usage: Choose based on whether you're building a traditional web app or REST API.

29. Q: How do you implement file uploading in Spring Boot?
A: Use MultipartFile in controller methods.
Example: @PostMapping("/upload") public String upload(@RequestParam("file") MultipartFile file) {...}
Configuration: Set multipart properties in application.properties.
Security: Implement proper validation and virus scanning for uploaded files.

30. Q: What is Spring Boot Starter? Name a few important ones.
A: Starters are dependency descriptors for easy project setup.
Examples: spring-boot-starter-web, spring-boot-starter-data-jpa, spring-boot-starter-security.
Benefit: Simplifies dependency management, ensures compatibility.
Usage: Include relevant starter(s) in project's pom.xml or build.gradle.

31. Q: How do you implement scheduled tasks in Spring Boot?
A: Use @Scheduled annotation, enable with @EnableScheduling.
Example: @Scheduled(fixedRate = 5000) public void doSomething() {...}
Benefit: Easy implementation of recurring tasks.
Caution: Be aware of concurrent execution if tasks overlap.

32. Q: What is the purpose of profiles in Spring Boot?
A: Profiles allow for environment-specific configuration.
Usage: Set different property files or beans for different environments.
Activation: Via spring.profiles.active property or programmatically.
Benefit: Simplifies managing configurations across different environments.

33. Q: How do you implement custom authentication in Spring Security?
A: Implement UserDetailsService interface, configure AuthenticationManagerBuilder.
Steps: Create custom UserDetails, UserDetailsService, configure in WebSecurityConfigurerAdapter.
Benefit: Allows integration with custom user stores or authentication logic.
Best practice: Encode passwords using proper password hashing algorithm.

34. Q: What is the difference between stateless and stateful authentication?
A: Stateless doesn't store session info on server, stateful does.
Stateless example: JWT-based authentication.
Stateful example: Traditional session-based authentication.
Consideration: Choose based on scalability needs and security requirements.

35. Q: How do you implement WebSocket communication in Spring Boot?
A: Use @EnableWebSocket and implement WebSocketHandler.
Configuration: Define WebSocketConfigurer to register handlers.
Usage: Good for real-time, bidirectional communication.
Alternative: Consider using STOMP over WebSocket for higher-level protocol.

36. Q: What is the purpose of the @ControllerAdvice annotation?
A: Used to define global exception handlers, model attributes, etc.
Usage: Create class with @ControllerAdvice, define @ExceptionHandler methods.
Benefit: Centralizes exception handling and common model attributes.
Scope: Can be limited to specific controllers or packages.

37. Q: How do you implement retry logic in Spring Boot?
A: Use @Retryable annotation from Spring Retry.
Configuration: Enable retry with @EnableRetry.
Example: @Retryable(maxAttempts=3, backoff=@Backoff(delay=1000))
Benefit: Improves resilience of the application against transient failures.

38. Q: What is the Circuit Breaker pattern and how is it implemented in Spring Boot?
A: Fault tolerance pattern, prevents cascading failures in distributed systems.
Implementation: Use libraries like Resilience4j or Hystrix.
Usage: Wrap vulnerable external calls with circuit breaker.
Benefit: Fail fast, provide fallback mechanisms, improve system resilience.

39. Q: How do you implement database migrations in Spring Boot?
A: Use tools like Flyway or Liquibase.
Configuration: Add relevant starter (e.g., spring-boot-starter-flyway).
Benefit: Version control for database schema, consistent schema across environments.
Best practice: Include migrations in source control.

40. Q: What is the purpose of the @Lazy annotation?
A: Used to defer bean creation until it's first needed.
Usage: Can be applied to component classes or @Bean methods.
Benefit: Can improve startup time and memory usage.
Caution: May hide configuration errors until runtime.

41. Q: What is the difference between @Value and @ConfigurationProperties?
A: @Value for individual properties, @ConfigurationProperties for binding multiple properties.
@Value example: @Value("${server.port}") private int serverPort;
@ConfigurationProperties: Used with a Java bean to bind multiple related properties.
Best practice: Use @ConfigurationProperties for groups of related properties.

42. Q: How do you implement rate limiting in Spring Boot?
A: Use libraries like Bucket4j or implement custom filters.
Example: Create interceptor or filter to check and limit request rates.
Configuration: Often combined with Redis or other distributed caches for clustered environments.
Benefit: Protects API from abuse, ensures fair usage.

43. Q: What is the purpose of the @EnableJpaAuditing annotation?
A: Enables JPA Auditing for tracking entity changes.
Usage: Use with @CreatedDate, @LastModifiedDate, @CreatedBy, @LastModifiedBy.
Benefit: Automatically manages audit fields in entities.
Configuration: Requires defining an AuditorAware bean for user auditing.

44. Q: How do you implement database read-write splitting in Spring Boot?
A: Configure multiple data sources, use @Transactional(readOnly = true) for read operations.
Implementation: Create separate DataSource beans for read and write operations.
Benefit: Improves performance by distributing read and write operations.
Complexity: Requires careful management of data consistency and replication lag.

45. Q: What is the purpose of the @ConditionalOnProperty annotation?
A: Conditionally enables or disables a configuration based on property presence and value.
Usage: Often used in auto-configuration classes.
Example: @ConditionalOnProperty(name = "scheduling.enabled", havingValue = "true")
Benefit: Allows for flexible, property-driven configuration.

46. Q: How do you implement API versioning in Spring Boot?
A: Use URL versioning, request parameter versioning, or custom headers.
URL example: @GetMapping("/v1/users")
Header example: @GetMapping(headers = "X-API-VERSION=1")
Consideration: Choose based on API design principles and client needs.

47. Q: What is the purpose of the @EnableConfigurationProperties annotation?
A: Enables support for @ConfigurationProperties beans.
Usage: Used in conjunction with @ConfigurationProperties classes.
Benefit: Allows binding of externalized properties to POJOs.
Alternative: Can be replaced by @ConfigurationPropertiesScan for component scanning.

48. Q: How do you implement request logging in Spring Boot?
A: Use CommonsRequestLoggingFilter or create a custom interceptor.
Configuration: Enable DEBUG logging for org.springframework.web.filter.CommonsRequestLoggingFilter.
Custom: Implement HandlerInterceptor for more control.
Benefit: Useful for debugging and monitoring API usage.

49. Q: What is the difference between @Bean and @Component?
A: @Bean used in @Configuration classes for explicit bean creation, @Component for auto-detection.
@Bean: More control over bean creation, can be used to create third-party beans.
@Component: Used on application classes, automatically detected by component scanning.
Usage: Choose based on whether you're configuring your own or third-party classes.

50. Q: How do you implement custom health indicators in Spring Boot Actuator?
A: Create a class implementing HealthIndicator interface.
Example: Check database connection or external service availability.
Registration: Spring auto-detects and includes custom health indicators.
Benefit: Provides detailed health information for specific application components.