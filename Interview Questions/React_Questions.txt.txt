
1. Q: What is React?
A: JavaScript library for building UIs, especially single-page applications.
Key features: Component-based, virtual DOM for efficient updates.
Use case: Creating interactive, dynamic web interfaces.
Benefit: Simplifies UI development with reusable components.

2. Q: What are the key features of React?
A: Virtual DOM, component-based architecture, unidirectional data flow, JSX.
Virtual DOM: Efficient update mechanism.
Components: Reusable, self-contained pieces of UI.
JSX: Syntax extension allowing HTML-like code in JavaScript.

3. Q: What is JSX?
A: Syntax extension for JavaScript used with React.
Purpose: Describe UI appearance within JavaScript code.
Example: const element = <h1>Hello, world!</h1>;
Benefit: Combines markup and logic in one place.

4. Q: What is the virtual DOM?
A: Lightweight copy of actual DOM used by React.
Purpose: Optimize rendering performance.
Process: React updates virtual DOM first, then efficiently updates real DOM.
Benefit: Minimizes direct DOM manipulation, improving performance.

5. Q: How does React Router work?
A: Library for dynamic, client-side routing in React apps.
Key feature: Enables navigation without page reloads.
Usage: Define routes corresponding to components.
Benefit: Creates a smooth, app-like user experience.

6. Q: What is the purpose of the 'key' prop when rendering a list of elements?
A: Helps React identify changed, added, or removed items.
Purpose: Optimize list rendering performance.
Usage: Unique identifier for each list item.
Best practice: Use stable IDs, not array indices.

7. Q: What are React Hooks?
A: Functions to use state and other React features in functional components.
Introduction: Added in React 16.8.
Examples: useState, useEffect, useContext.
Benefit: Simplify state management and side effects in functional components.

8. Q: What is the useState hook used for?
A: Adds state management to functional components.
Syntax: const [state, setState] = useState(initialState);
Usage: Declare state variables and their update functions.
Benefit: Enables stateful logic in functional components.

9. Q: How does the useEffect hook work?
A: Manages side effects in functional components.
Use cases: Data fetching, DOM manipulation, subscriptions.
Syntax: useEffect(() => { ... }, [dependencies]);
Benefit: Handles component lifecycle events in functional components.

10. Q: What is Redux and why might you use it?
A: State management library often used with React.
Purpose: Manage complex application state.
Key concepts: Store, actions, reducers.
Benefit: Centralizes state, making it easier to manage in large applications.

11. Q: How do you implement code-splitting in React?
A: Use React.lazy and Suspense for dynamically importing components.
Benefit: Improves initial load time by loading components on demand.
Example: const OtherComponent = React.lazy(() => import('./OtherComponent'));
Usage: Wrap lazy component with Suspense, providing fallback UI.

12. Q: What is the purpose of the useMemo hook?
A: Memoizes expensive computations to optimize performance.
Syntax: const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
Use case: Avoid unnecessary re-computations on every render.
Benefit: Improves performance by caching computed values.

13. Q: How does the useCallback hook differ from useMemo?
A: useCallback memoizes functions, useMemo memoizes values.
useCallback: Useful for preventing unnecessary re-renders of child components.
useMemo: Useful for expensive computations.
Both: Help optimize performance in different scenarios.

14. Q: What is the Context API in React?
A: Provides way to pass data through component tree without props.
Use case: Managing global state like themes, user data.
Components: React.createContext, Provider, useContext.
Benefit: Avoids prop drilling in deeply nested component structures.

15. Q: How do you handle forms in React?
A: Typically use controlled components.
Controlled components: Form data stored in component state.
Process: Update state on input change, handle form submission.
Benefit: React has full control over form data.

16. Q: What are Higher-Order Components (HOCs)?
A: Functions that take a component and return a new one.
Purpose: Add additional props or behavior to components.
Example: const EnhancedComponent = higherOrderComponent(WrappedComponent);
Benefit: Reuse component logic across multiple components.

17. Q: How do you optimize performance in a React application?
A: Use memoization, code-splitting, React Profiler.
Memoization: React.memo, useMemo, useCallback to prevent unnecessary re-renders.
Code-splitting: Load components on demand.
React Profiler: Identify performance bottlenecks.

18. Q: What is the purpose of the useRef hook?
A: Creates mutable reference persisting across re-renders.
Use cases: Accessing DOM elements, storing mutable values.
Syntax: const refContainer = useRef(initialValue);
Benefit: Doesn't cause re-renders when its content changes.

19. Q: How do you handle side effects in React components?
A: Typically use useEffect hook in functional components.
Side effects: Data fetching, subscriptions, manual DOM mutations.
Syntax: useEffect(() => { ... }, [dependencies]);
Best practice: Specify dependencies array to control when effect runs.

20. Q: What is the difference between state and props?
A: State is mutable and component-managed, props are immutable and parent-passed.
State: Used for data that changes over time within a component.
Props: Used to pass data and callbacks from parent to child components.
Key difference: Components can change their state but not their props directly.

21. Q: How do you pass data from a child component to a parent component?
A: Pass callback function as prop to child component.
Child component: Calls the callback with data as argument.
Parent component: Receives data through callback execution.
Example: <ChildComponent onDataChange={handleDataChange} />

22. Q: What is the purpose of the useContext hook?
A: Allows functional components to consume values from a React context.
Syntax: const value = useContext(MyContext);
Benefit: Simplifies consuming context in functional components.
Use case: Accessing global data without prop drilling.

23. Q: How do you implement error boundaries in React?
A: Use class components with componentDidCatch lifecycle method.
Purpose: Catch JavaScript errors anywhere in child component tree.
Usage: Wrap components that might throw errors.
Benefit: Prevents entire app from crashing due to errors in parts of UI.

24. Q: What is the significance of the 'key' prop in reconciliation?
A: Helps React efficiently update lists by identifying which items have changed.
Purpose: Optimize rendering performance for dynamic lists.
Best practice: Use unique and stable identifiers, not array indices.
Impact: Improves update speed and reduces unnecessary re-renders.

25. Q: How do you conditionally render components in React?
A: Use ternary operators, && operator, or if statements in JSX.
Ternary: {condition ? <ComponentA /> : <ComponentB />}
&& operator: {condition && <Component />}
If statements: Store JSX in variables based on conditions.

26. Q: What is the purpose of React.Fragment?
A: Allows grouping multiple elements without adding extra DOM node.
Syntax: <React.Fragment> or shorthand <> </>
Use case: Returning multiple elements from a component.
Benefit: Keeps DOM structure clean and avoids unnecessary wrapping elements.

27. Q: How do you handle asynchronous operations in React?
A: Use useEffect hook, async/await, or libraries like Redux-Thunk.
useEffect: For side effects like data fetching.
async/await: Within event handlers or custom hooks.
Redux-Thunk: For managing async actions in Redux.

28. Q: What is the difference between controlled and uncontrolled components?
A: Controlled components have state managed by React, uncontrolled manage own state.
Controlled: Form data handled by React component state.
Uncontrolled: Form data handled by DOM itself.
Choice depends on specific use case and form complexity.

29. Q: How do you implement a custom hook?
A: Create function starting with 'use', can call other hooks.
Purpose: Extract component logic into reusable functions.
Example: function useCustomHook() { const [state, setState] = useState(initialState); ... }
Benefit: Share stateful logic between components.

30. Q: What is the purpose of the useLayoutEffect hook?
A: Similar to useEffect, but fires synchronously after DOM mutations.
Use case: When you need to read layout from DOM and synchronously re-render.
Caution: Can impact performance, use useEffect when possible.
Syntax: useLayoutEffect(() => { ... }, [dependencies]);

31. Q: How do you implement server-side rendering with React?
A: Use frameworks like Next.js or manually render React components on server.
Next.js: Provides built-in SSR capabilities.
Manual: Use ReactDOMServer.renderToString() on server.
Benefit: Improves initial page load and SEO.

32. Q: What is the purpose of the dangerouslySetInnerHTML attribute?
A: Injects HTML directly into a component.
Warning: Use cautiously due to XSS risks.
Syntax: dangerouslySetInnerHTML={{__html: htmlString}}
Use case: When you absolutely need to set HTML from code.

33. Q: How do you handle routing in a React application?
A: Typically use libraries like React Router.
Setup: Define routes corresponding to components.
Usage: Use components like Route, Link, Switch.
Benefit: Enables navigation in single-page applications.

34. Q: What is the purpose of the useReducer hook?
A: Alternative to useState for managing complex state logic.
Syntax: const [state, dispatch] = useReducer(reducer, initialState);
Use case: When state logic involves multiple sub-values or complex updates.
Benefit: Centralizes state update logic.

35. Q: How do you implement debouncing in React?
A: Use custom hooks or libraries like lodash.
Purpose: Delay execution of a function until after a period of inactivity.
Example: Delaying API calls on input change.
Implementation: Set and clear timeout in useEffect or custom hook.

36. Q: What is the purpose of the React.memo function?
A: Memoize functional components to prevent unnecessary re-renders.
Usage: const MemoizedComponent = React.memo(MyComponent);
Benefit: Performance optimization for functional components.
Note: Similar to shouldComponentUpdate for class components.

37. Q: How do you handle authentication in a React application?
A: Use JWT tokens, protected routes, store auth state in global state.
Process: Send credentials, receive token, store in state/localStorage.
Protected routes: Redirect unauthenticated users.
Global state: Context API or Redux to share auth state.

38. Q: What is the purpose of the useImperativeHandle hook?
A: Customizes instance value exposed when using ref on child component.
Use case: When parent needs to call methods on child component.
Syntax: useImperativeHandle(ref, () => ({...}), [deps]);
Benefit: Gives fine-grained control over what's exposed to parent components.

39. Q: How do you implement infinite scrolling in React?
A: Use intersection observers or libraries like react-infinite-scroll-component.
Process: Detect when user nears bottom, trigger data fetch.
Implementation: useEffect with IntersectionObserver or third-party library.
Benefit: Improves performance for long lists by loading data as needed.

40. Q: What is the purpose of the StrictMode component in React?
A: Tool for highlighting potential problems in an application.
Features: Identifies unsafe lifecycles, legacy API usage.
Usage: Wrap root or part of app in <React.StrictMode>.
Note: Runs extra checks and warnings in development mode only.

41. Q: How do you handle global state without using Redux?
A: Use Context API or other state management libraries like Recoil or MobX.
Context API: Built-in React solution for passing data deeply.
Recoil: Facebook's state management library for React.
MobX: Simple, scalable state management.

42. Q: What is the purpose of the useTransition hook in React 18?
A: Marks state updates as non-urgent, improving perceived performance.
Usage: const [isPending, startTransition] = useTransition();
Benefit: Keeps app responsive during large rendering updates.
Use case: Deprioritizing non-critical updates in favor of more urgent ones.

43. Q: How do you implement code-splitting on a route level?
A: Use React.lazy with React Router.
Example: const About = React.lazy(() => import('./About'));
Wrap with Suspense: <Suspense fallback={<Loading />}><About /></Suspense>
Benefit: Reduces initial bundle size, improves load time.

44. Q: What is the purpose of the useDeferredValue hook?
A: Defers updating a part of the UI, similar to debouncing.
Usage: const deferredValue = useDeferredValue(value);
Use case: When you want to deprioritize rendering of less important UI.
Benefit: Keeps app responsive by deferring expensive re-renders.

45. Q: How do you handle form validation in React?
A: Use libraries like Formik or react-hook-form, or implement custom logic.
Formik: Provides form state management and validation.
react-hook-form: Performant, flexible and extensible forms.
Custom: Implement validation in onChange handlers or on form submission.

46. Q: What is the purpose of the React Developer Tools?
A: Browser extension for inspecting React component hierarchies and state.
Features: Component tree navigation, props/state inspection, performance profiling.
Usage: Install browser extension, use in Developer Tools pane.
Benefit: Aids debugging and optimization of React applications.

47. Q: How do you implement a modal in React?
A: Use portals to render content outside normal component tree.
Process: Create portal, manage modal state, render outside main app div.
Benefit: Allows modal to visually render "on top" of other components.
Example: ReactDOM.createPortal(modalContent, document.body);

48. Q: What is the purpose of the useId hook in React 18?
A: Generates unique IDs for accessibility attributes.
Usage: const id = useId();
Benefit: Ensures unique IDs across server and client rendering.
Use case: Linking labels to form controls, ARIA attributes.

49. Q: How do you handle internationalization in a React application?
A: Use libraries like react-intl or i18next.
Process: Extract strings, create translations, use library components/hooks.
react-intl: Provides components and API for formatting strings, numbers, dates.
i18next: Comprehensive internationalization framework.

50. Q: What are the main differences between React and other frontend frameworks like Angular or Vue?
A: React is a library focused on UI components, others are more comprehensive.
React: Uses virtual DOM, JSX, unidirectional data flow.
Angular: Full MVC framework, uses real DOM, two-way data binding.
Vue: Progressive framework, virtual DOM, template-based, easier learning curve.