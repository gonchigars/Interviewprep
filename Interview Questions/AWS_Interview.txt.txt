
1. Q: What is cloud computing?
A: On-demand delivery of IT resources over the Internet with pay-as-you-go pricing.
Example: Quickly launch servers for a new project without upfront hardware costs.
Benefit: Reduces capital expenses and allows for rapid scaling.
Related: AWS EC2 is a prime example of this model for compute resources.

2. Q: What are the main advantages of using AWS?
A: Scalability, flexibility, cost-effectiveness, global reach, and wide range of services.
Example: Easily handle traffic spikes during promotions using Auto Scaling.
Key benefit: Pay only for resources used, optimizing IT spend.
Connection: These advantages apply across various AWS services like EC2, S3, and RDS.

3. Q: How do you create an AWS account?
A: Sign up on AWS website, provide necessary information, set up billing details.
Important step: Enable Multi-Factor Authentication for added security.
Tip: Start with a free tier account to explore services without cost.
Next: Set up IAM users and groups for best security practices.

4. Q: What is an AWS Region?
A: Geographical area with multiple isolated data centers (Availability Zones).
Example: US-East-1 (N. Virginia) is a commonly used region.
Benefit: Choose region close to users for lower latency.
Consideration: Data residency laws may affect region selection.

5. Q: What is an Availability Zone (AZ)?
A: Physically separate data center within an AWS Region.
Example: us-east-1a is an AZ in the US-East-1 region.
Key for: Building highly available and fault-tolerant applications.
Used with: Services like EC2 and RDS for redundancy.

6. Q: How do you design for high availability in AWS?
A: Utilize multiple AZs, implement auto-scaling, use services like Elastic Load Balancing.
Example: Deploy app servers across multiple AZs behind a load balancer.
Benefit: Application remains available even if one AZ fails.
Advanced: Consider using Route 53 for DNS-level failover between regions.

7. Q: What is Amazon EC2?
A: Elastic Compute Cloud (EC2) provides resizable compute capacity in the cloud.
Use case: Launch web servers or application servers quickly.
Key feature: Choose from various instance types for different workloads.
Related: Often used with EBS for storage and VPC for networking.

8. Q: How do you create an EC2 instance?
A: Choose AMI, select instance type, configure details, add storage, tags, set security group, launch.
Tip: Start with a t2.micro instance in the free tier for testing.
Important: Ensure proper security group rules to control access.
Consider: Using an Elastic IP for a static public IP address if needed.

9. Q: What is an Amazon Machine Image (AMI)?
A: Template with software configuration used to create EC2 instances.
Contents: OS, application server, and applications.
Benefit: Quickly launch pre-configured instances.
Types: AWS-provided, Marketplace, or custom AMIs.

10. Q: What is auto-scaling in AWS?
A: Feature automatically adjusting EC2 instance count based on demand.
Example: Increase capacity during business hours, decrease at night.
Benefit: Maintains performance while optimizing costs.
Often used with: Elastic Load Balancing for distributing traffic.

11. Q: How do you implement auto-scaling?
A: Create a launch template, create an auto-scaling group, set scaling policies.
Key step: Define metrics and thresholds for scaling actions.
Benefit: Automatically responds to changing application load.
Tip: Test scaling policies with simulated load before production use.

12. Q: What is Elastic Load Balancing (ELB)?
A: Service distributing incoming application traffic across multiple targets.
Types: Application, Network, and Classic Load Balancers.
Use case: Improve application availability and fault tolerance.
Related: Often used with Auto Scaling groups.

13. Q: What types of load balancers does AWS offer?
A: Application Load Balancer, Network Load Balancer, Classic Load Balancer.
ALB: Best for HTTP/HTTPS traffic, operates at application layer.
NLB: Handles TCP/UDP traffic, high performance at transport layer.
CLB: Previous generation, supports Layer 4 and basic Layer 7 loading balancing.

14. Q: What is AWS Elastic Beanstalk?
A: Service for deploying and scaling web applications and services.
Supports: Various programming languages and web containers.
Benefit: Simplifies deployment and management of applications.
Handles: Capacity provisioning, load balancing, auto-scaling, health monitoring.

15. Q: How does Elastic Beanstalk simplify application deployment?
A: Handles capacity provisioning, load balancing, auto-scaling, and health monitoring.
Benefit: Developers focus on code, not infrastructure management.
Example: Upload code, Beanstalk handles deployment and scaling.
Flexibility: Allows access to underlying resources if needed.

16. Q: What is AWS Lambda?
A: Serverless compute service running code in response to events.
Key feature: Automatically manages underlying compute resources.
Use case: Build event-driven applications without managing servers.
Benefit: Pay only for compute time used, scales automatically.

17. Q: How do you create a Lambda function?
A: Choose runtime, write/upload code, configure triggers, set role and limits.
Tip: Start with a simple function to understand the process.
Important: Set appropriate memory and timeout values.
Best practice: Use environment variables for configuration.

18. Q: What is Amazon EKS?
A: Elastic Kubernetes Service, a managed Kubernetes service.
Use case: Run containerized applications at scale.
Benefit: Eliminates need to install and operate Kubernetes control plane.
Integration: Works with other AWS services like VPC, IAM, ELB.

19. Q: How do you deploy an application on EKS?
A: Create EKS cluster, configure kubectl, create Kubernetes deployments and services.
Key step: Ensure proper IAM roles and VPC configuration.
Tip: Use eksctl tool for simplified cluster creation.
Best practice: Use Helm charts for complex application deployments.

20. Q: What is AWS CloudFormation?
A: Service for modeling and setting up AWS resources using templates.
Benefit: Allows infrastructure as code, enabling version control.
Key feature: Creates and manages a collection of AWS resources as a single unit.
Use case: Standardize infrastructure deployment across multiple environments.

21. Q: What is Infrastructure as Code (IaC)?
A: Practice of managing infrastructure through machine-readable definition files.
Benefit: Enables version control and consistent deployments.
Example: Using CloudFormation templates to define AWS resources.
Related: Terraform is another popular IaC tool used with AWS.

22. Q: What is AWS CodePipeline?
A: Fully managed continuous delivery service for automating release pipelines.
Key components: Source, build, and deploy stages.
Benefit: Automates the build, test, and deploy processes.
Integration: Works with AWS services and third-party tools.

23. Q: How do you set up a CI/CD pipeline in AWS?
A: Use CodeCommit, CodeBuild, CodeDeploy, and CodePipeline.
Steps: Set up source control, define build process, configure deployment.
Benefit: Automates software release process, improving efficiency.
Best practice: Include automated testing in the pipeline.

24. Q: What is Amazon CloudFront?
A: Fast content delivery network (CDN) service.
Use case: Deliver data, videos, applications, and APIs globally.
Benefit: Reduces latency and improves user experience.
Integration: Often used with S3, EC2, and ELB as origins.

25. Q: How does CloudFront improve performance?
A: Caches content at edge locations, reducing latency for users.
Benefit: Offloads traffic from origin, improving scalability.
Feature: Supports dynamic content and API acceleration.
Security: Integrates with AWS Shield for DDoS protection.

26. Q: What is AWS Cost Explorer?
A: Tool for viewing and analyzing AWS costs and usage.
Features: Provides visualizations, cost forecasting, and recommendations.
Use case: Identify cost-saving opportunities and track spending trends.
Tip: Use tagging strategy to better categorize and analyze costs.

27. Q: How do you optimize costs in AWS?
A: Use reserved instances, leverage auto-scaling, use spot instances.
Best practice: Regularly review and terminate unused resources.
Tool: AWS Trusted Advisor provides cost optimization recommendations.
Strategy: Implement proper tagging for better cost allocation.

28. Q: What is AWS Identity and Access Management (IAM)?
A: Service for securely controlling access to AWS resources.
Key components: Users, groups, roles, and policies.
Best practice: Follow principle of least privilege.
Feature: Supports identity federation with external directories.

29. Q: What is the principle of least privilege in IAM?
A: Granting only the permissions required to perform a task.
Benefit: Enhances security by limiting potential damage from compromised accounts.
Implementation: Use fine-grained policies and regularly review permissions.
Tool: IAM Access Analyzer helps identify unintended resource access.

30. Q: What is an IAM role?
A: IAM identity with specific permissions that can be assumed.
Use case: Grant temporary access to users or AWS services.
Benefit: Avoids need for long-term access keys.
Example: EC2 instance role for accessing S3 bucket.

31. Q: What is Amazon S3?
A: Simple Storage Service, object storage with high durability.
Features: Scalability, data availability, security, performance.
Use cases: Data lakes, static website hosting, application asset storage.
Integration: Works with many AWS services and third-party tools.

32. Q: What is the difference between S3 storage classes?
A: Classes offer various durability, availability, and cost levels.
Examples: Standard for frequent access, Glacier for long-term archival.
Benefit: Optimize storage costs based on access patterns.
Feature: Lifecycle policies can automatically move objects between classes.

33. Q: What is Amazon RDS?
A: Managed relational database service supporting multiple engines.
Supported engines: MySQL, PostgreSQL, Oracle, SQL Server, MariaDB.
Benefits: Automated patching, backups, and high availability.
Feature: Multi-AZ deployments for improved fault tolerance.

34. Q: How do you ensure database high availability in RDS?
A: Use Multi-AZ deployments and read replicas.
Multi-AZ: Synchronous replication to standby in different AZ.
Read replicas: Asynchronous replication for read scaling.
Best practice: Combine both for high availability and performance.

35. Q: What is Amazon DynamoDB?
A: Fully managed NoSQL database service.
Features: Low-latency performance at any scale.
Use case: Applications with large amounts of data and strict latency requirements.
Benefit: Automatically scales throughput capacity as needed.

36. Q: What is AWS VPC?
A: Virtual Private Cloud, logically isolated section of AWS Cloud.
Features: Control over IP address range, subnets, route tables, network gateways.
Benefit: Provides network isolation for AWS resources.
Use case: Create a private network for your application infrastructure.

37. Q: What is a subnet in AWS?
A: Range of IP addresses in your VPC.
Types: Public subnets (internet accessible) and private subnets.
Use case: Organize and isolate resources within a VPC.
Best practice: Spread resources across multiple Availability Zones.

38. Q: What is a security group in AWS?
A: Virtual firewall for controlling inbound and outbound traffic.
Feature: Stateful, remembers allowed return traffic.
Scope: Acts at the instance level.
Best practice: Follow principle of least privilege in rule configuration.

39. Q: What is Amazon Route 53?
A: Scalable and highly available Domain Name System (DNS) web service.
Features: Domain registration, DNS routing, health checking.
Use case: Manage DNS records for your domain names.
Advanced feature: Supports complex routing policies like geolocation and failover.

40. Q: How can you use Route 53 for fault tolerance?
A: Implement DNS failover to reroute traffic to healthy endpoints.
Feature: Health checks to monitor endpoint health.
Benefit: Improves application availability and user experience.
Example: Failover between primary and secondary websites in different regions.

41. Q: What is AWS CloudWatch?
A: Monitoring and observability service for AWS resources.
Features: Collect and track metrics, collect and monitor log files, set alarms.
Use case: Monitor application and infrastructure performance.
Integration: Works with most AWS services and can ingest custom metrics.

42. Q: How do you set up alarms in CloudWatch?
A: Define metrics, set thresholds, configure actions for breaches.
Actions: Can trigger Auto Scaling, EC2 actions, or send notifications.
Best practice: Set up alarms for critical system metrics.
Tip: Use composite alarms to monitor multiple related metrics.

43. Q: What is AWS SNS?
A: Simple Notification Service, fully managed messaging service.
Use cases: Application-to-application and application-to-person communication.
Features: Topics for publish/subscribe functionality.
Integration: Can trigger Lambda functions or send to SQS queues.

44. Q: What is AWS SQS?
A: Simple Queue Service, fully managed message queuing service.
Types: Standard queues (high throughput) and FIFO queues (exactly-once processing).
Use case: Decouple and scale microservices, distributed systems, and serverless applications.
Feature: Supports dead-letter queues for handling failed message processing.

45. Q: How do SNS and SQS work together?
A: SNS can be used to fan out messages to multiple SQS queues.
Benefit: Enables parallel asynchronous processing.
Use case: Distribute workload across multiple processing systems.
Example: Order processing system sending updates to multiple downstream systems.

46. Q: What is AWS Step Functions?
A: Serverless function orchestrator for sequencing AWS Lambda functions and services.
Feature: Visual workflow to orchestrate your application's components.
Use case: Build complex workflows for applications and microservices.
Benefit: Manages state, checkpoints, and restarts to ensure your application runs in order and as expected.

47. Q: What is Amazon API Gateway?
A: Fully managed service for creating, publishing, and managing APIs.
Features: Traffic management, authorization and access control, monitoring, API version management.
Use case: Build RESTful APIs and WebSocket APIs.
Integration: Can trigger Lambda functions, connect to EC2, or integrate with other AWS services.

48. Q: How do you secure an API in API Gateway?
A: Use API keys, IAM roles, Lambda authorizers, or Cognito User Pools.
API keys: For simple API key validation.
IAM roles: For fine-grained access control using AWS credentials.
Lambda authorizers: For custom authorization logic.
Cognito User Pools: For OAuth 2.0 and social identity provider integration.

49. Q: What is AWS ElastiCache?
A: Fully managed in-memory data store and cache service.
Supported engines: Redis and Memcached.
Use case: Improve application performance by retrieving data from fast in-memory caches.
Feature: Supports real-time applications with sub-millisecond latency.

50. Q: How does caching improve application performance?
A: Stores frequently accessed data in memory, reducing need to access slower data stores.
Benefit: Lowers latency and increases throughput for read-heavy workloads.
Use case: Caching database queries, session stores, real-time analytics.
Best practice: Implement cache invalidation strategy to ensure data consistency.